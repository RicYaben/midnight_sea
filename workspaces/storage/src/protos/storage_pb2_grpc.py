# Copyright 2023 Ricardo Yaben
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ms_storage.protos import storage_pb2 as ms__storage_dot_protos_dot_storage__pb2


class StorageStub(object):
    """The Storage service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Store = channel.unary_unary(
                '/storage.Storage/Store',
                request_serializer=ms__storage_dot_protos_dot_storage__pb2.StoreRequest.SerializeToString,
                response_deserializer=ms__storage_dot_protos_dot_storage__pb2.StoreResponse.FromString,
                )
        self.Pending = channel.unary_unary(
                '/storage.Storage/Pending',
                request_serializer=ms__storage_dot_protos_dot_storage__pb2.PendingRequest.SerializeToString,
                response_deserializer=ms__storage_dot_protos_dot_storage__pb2.PendingResponse.FromString,
                )
        self.Check = channel.unary_unary(
                '/storage.Storage/Check',
                request_serializer=ms__storage_dot_protos_dot_storage__pb2.CheckRequest.SerializeToString,
                response_deserializer=ms__storage_dot_protos_dot_storage__pb2.CheckResponse.FromString,
                )


class StorageServicer(object):
    """The Storage service
    """

    def Store(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pending(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StorageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Store': grpc.unary_unary_rpc_method_handler(
                    servicer.Store,
                    request_deserializer=ms__storage_dot_protos_dot_storage__pb2.StoreRequest.FromString,
                    response_serializer=ms__storage_dot_protos_dot_storage__pb2.StoreResponse.SerializeToString,
            ),
            'Pending': grpc.unary_unary_rpc_method_handler(
                    servicer.Pending,
                    request_deserializer=ms__storage_dot_protos_dot_storage__pb2.PendingRequest.FromString,
                    response_serializer=ms__storage_dot_protos_dot_storage__pb2.PendingResponse.SerializeToString,
            ),
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=ms__storage_dot_protos_dot_storage__pb2.CheckRequest.FromString,
                    response_serializer=ms__storage_dot_protos_dot_storage__pb2.CheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'storage.Storage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Storage(object):
    """The Storage service
    """

    @staticmethod
    def Store(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/storage.Storage/Store',
            ms__storage_dot_protos_dot_storage__pb2.StoreRequest.SerializeToString,
            ms__storage_dot_protos_dot_storage__pb2.StoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Pending(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/storage.Storage/Pending',
            ms__storage_dot_protos_dot_storage__pb2.PendingRequest.SerializeToString,
            ms__storage_dot_protos_dot_storage__pb2.PendingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/storage.Storage/Check',
            ms__storage_dot_protos_dot_storage__pb2.CheckRequest.SerializeToString,
            ms__storage_dot_protos_dot_storage__pb2.CheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
